# Copyright 2015 Maintainers of GridPG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

class Cluster(object):
  
  @staticmethod
  def before_up(ctx):
    CV_PATH = ctx.cluster_path(".CassieVede")
    if not os.path.exists(CV_PATH):
      ctx.log.info("Setting up CassieVede ...")
      ctx.run_in_shell(
        "git clone --depth 1 https://gitlab.com/siawp/CassieVede.git " + CV_PATH)
      # TODO FIXME
      #ctx.run_in_shell(
      #  "cd " + CV_PATH + " && ./bootstrap.py --build-docker")
      
    ctx.run_in_shell(
      "cd " + ctx.cluster_path("cv_spark") + " && docker build -t cv_spark .")
    ctx.run_in_shell(
      "cd " + ctx.cluster_path("cv_cassandra") + " && docker build -t cv_cassandra .")
    ctx.log.info("... done.")
  
  @staticmethod
  def k8s_up_env(ctx):
    return {
      "NUM_MINIONS": "4",
      
      # Do not enable any logging
      "KUBE_ENABLE_CLUSTER_MONITORING": "none",
      "KUBE_ENABLE_NODE_LOGGING": "false",
      "KUBE_ENABLE_CLUSTER_LOGGING": "false",
      
      # TODO: only for GCE
      #"MINION_SIZE": "n1-standard-4",
    }
  
  @staticmethod
  def k8s_create_defs(ctx):
    return (
      ctx.gpg_path("k8s_specs/docker-private-registry.yaml"),
      ctx.gpg_path("k8s_specs/docker-private-registry-service.yaml"),
    )

  @staticmethod
  def after_up(ctx):
    CV_PATH = ctx.cluster_path(".CassieVede")
    ctx.push_to_remote_docker_registry("cassievedebox")
